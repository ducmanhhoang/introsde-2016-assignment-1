package Assignment01.lab04;

import java.io.File;
import java.io.FileOutputStream;
import java.math.BigInteger;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.ValidationEvent;
import javax.xml.bind.ValidationEventHandler;
import javax.xml.bind.ValidationEventLocator;
import javax.xml.validation.Schema;
import javax.xml.validation.SchemaFactory;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.module.jaxb.JaxbAnnotationModule;

import people.generated.HealthProfileType;
import people.generated.PeopleType;
import people.generated.PersonType;
import utils.DateTimeConverter;
import utils.RandomData;

public class Requirement03 {
	
	public static void main(String[] args) {
		System.out.println("********************************Converts the people.xml to people.json******************************");
		Requirement03 app = new Requirement03();
		try {
			app.convertToJSON();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/*
	 * Based on Lab04
	 * 3.Make your java application to convert also JSON
	 */
	public void convertToJSON() throws Exception {
		// Getting database from people.xml file.
		PeopleType people = marshallingPeople();
		
		// Jackson Object Mapper
		ObjectMapper mapper = new ObjectMapper();

		// Adding the Jackson Module to process JAXB annotations
		JaxbAnnotationModule module = new JaxbAnnotationModule();

		// Configure as necessary
		mapper.registerModule(module);
		mapper.configure(SerializationFeature.INDENT_OUTPUT, true);
		mapper.configure(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS, true);

		String result = mapper.writeValueAsString(people);
		System.out.println(result);
		mapper.writeValue(new File("people.json"), people);
	}
	
	/*
	 * Based on Lab04
	 * 2.Write a java application that does the marshalling using classes generated with JAXB XJC
	 */
	public PeopleType marshallingPeople() throws Exception {
		System.out.println("********************************Marshalling using classes generated by JAXB XJC******************************");
		JAXBContext jaxbContext = JAXBContext.newInstance("people.generated");
		Marshaller marshaller = jaxbContext.createMarshaller();
		marshaller.setProperty("jaxb.formatted.output", new Boolean(true));
		people.generated.ObjectFactory factory = new people.generated.ObjectFactory();
		
		PeopleType people = factory.createPeopleType();
		RandomData rd = new RandomData();

		for (int i = 1; i <= 3; i++) {
			PersonType person = factory.createPersonType();
			person.setId(BigInteger.valueOf(1));
			person.setFirstname(rd.getRandomFirstName());
			person.setLastname(rd.getRandomLastName());
			person.setBirthdate(rd.getRandomBirthdate());

			HealthProfileType healthprofileType = factory.createHealthProfileType();
			healthprofileType.setLastupdate(new DateTimeConverter().getTodayDate());
			healthprofileType.setWeight(rd.getRandomWeight());
			healthprofileType.setHeight(rd.getRandomHeight());
			healthprofileType.setBmi(healthprofileType.getWeight()/(Math.pow(healthprofileType.getHeight(), 2)));
			person.setHealthprofile(healthprofileType);

			people.getPerson().add(person);
		}
		
		return people;
	}
}