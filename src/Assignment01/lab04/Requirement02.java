package Assignment01.lab04;

import java.io.File;
import java.io.FileOutputStream;
import java.math.BigInteger;
import java.util.List;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.ValidationEvent;
import javax.xml.bind.ValidationEventHandler;
import javax.xml.bind.ValidationEventLocator;
import javax.xml.validation.Schema;
import javax.xml.validation.SchemaFactory;

import people.generated.HealthProfileType;
import people.generated.PeopleType;
import people.generated.PersonType;
import utils.DateTimeConverter;
import utils.RandomData;

public class Requirement02 {
	public static void main(String[] args) {
		Requirement02 app = new Requirement02();
		try {
			if (args[0].equals("1")) {
				app.marshallingPeople();
			} else {
				app.unmarshallingPeople();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	class CustomValidationEventHandler implements ValidationEventHandler {
		public boolean handleEvent(ValidationEvent event) {
			if (event.getSeverity() == ValidationEvent.WARNING) {
				return true;
			}
			if ((event.getSeverity() == ValidationEvent.ERROR)
					|| (event.getSeverity() == ValidationEvent.FATAL_ERROR)) {

				System.out.println("Validation Error:" + event.getMessage());

				ValidationEventLocator locator = event.getLocator();
				System.out.println("at line number:" + locator.getLineNumber());
				System.out.println("Unmarshalling Terminated");
				return false;
			}
			return true;
		}

	}

	/*
	 * Based on Lab04 2.Write a java application that does the un-marshalling
	 * using classes generated with JAXB XJC
	 */
	public void unmarshallingPeople() throws Exception {
		System.out.println(
				"********************************Unmarshalling using classes generated by JAXB XJC******************************");
		JAXBContext jaxbContext = JAXBContext.newInstance("people.generated");
		Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();
		SchemaFactory schemaFactory = SchemaFactory.newInstance("http://www.w3.org/2001/XMLSchema");
		Schema schema = schemaFactory.newSchema(new File("people.xsd"));
		unmarshaller.setSchema(schema);
		CustomValidationEventHandler validationEventHandler = new CustomValidationEventHandler();
		unmarshaller.setEventHandler(validationEventHandler);

		@SuppressWarnings("unchecked")
		JAXBElement<PeopleType> peopleElement = (JAXBElement<PeopleType>) unmarshaller
				.unmarshal(new File("people01.xml"));

		PeopleType people = peopleElement.getValue();

		List<PersonType> personList = people.getPerson();
		for (int i = 0; i < personList.size(); i++) {

			PersonType person = (PersonType) personList.get(i);

			System.out.println("Full name: " + person.getFirstname() + " " + person.getLastname());
			System.out.println("Birthdate: " + person.getBirthdate());
			HealthProfileType healthprofile = person.getHealthprofile();
			System.out.println("Last update: " + healthprofile.getLastupdate());
			System.out.println("Weight: " + healthprofile.getWeight());
			System.out.println("Height: " + healthprofile.getHeight());
			System.out.println("BMI: " + healthprofile.getBmi());
			System.out.println("--------------------------------------");
			System.out.println();
		}
	}

	/*
	 * Based on Lab04 2.Write a java application that does the marshalling using
	 * classes generated with JAXB XJC
	 */
	public void marshallingPeople() throws Exception {
		System.out.println(
				"********************************Marshalling using classes generated by JAXB XJC******************************");
		JAXBContext jaxbContext = JAXBContext.newInstance("people.generated");
		Marshaller marshaller = jaxbContext.createMarshaller();
		marshaller.setProperty("jaxb.formatted.output", new Boolean(true));
		people.generated.ObjectFactory factory = new people.generated.ObjectFactory();

		PeopleType people = factory.createPeopleType();
		RandomData rd = new RandomData();

		for (int i = 1; i <= 3; i++) {
			PersonType person = factory.createPersonType();
			person.setId(BigInteger.valueOf(1));
			person.setFirstname(rd.getRandomFirstName());
			person.setLastname(rd.getRandomLastName());
			person.setBirthdate(rd.getRandomBirthdate());

			HealthProfileType healthprofileType = factory.createHealthProfileType();
			healthprofileType.setLastupdate(new DateTimeConverter().getTodayDate());
			healthprofileType.setWeight(rd.getRandomWeight());
			healthprofileType.setHeight(rd.getRandomHeight());
			healthprofileType.setBmi(healthprofileType.getWeight()/(Math.pow(healthprofileType.getHeight(), 2)));
			person.setHealthprofile(healthprofileType);

			people.getPerson().add(person);
		}

		JAXBElement<PeopleType> personElement = factory.createPeople(people);
		marshaller.marshal(personElement, new FileOutputStream("people01.xml"));
		System.out.println("Generated people01.xml");
	}
}
